<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eco.Plugins</name>
    </assembly>
    <members>
        <member name="T:Eco.Plugins.Networking.Client.NetObjectPriorityComparer">
            <summary> Comparer for net objects by priority. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.ActivateSession(Eco.Shared.Authentication.LoginSession)">
            <summary>Activate session and finish authorization.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.VerifySession(Eco.Shared.Authentication.LoginSession)">
            <summary>Verifies <paramref name="sessionInfo"/> and fills with data from auth server. Returns error or <c>null</c> if verification succeed.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.RequireLoginQueueIfNeeded">
            <summary> Next step of connection, used after session is confirmed. Here it checks if it should be done directly or via queue. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.TryFinishLoginQueue">
            <summary> Try to login in the server. This RPC method is called by the client each ~5 seconds to maintain his position in the queue.</summary>
            <returns> Vector2i(Queue Position, Queue Length). If there is not queue returns (-1,-1)</returns>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.SyncedViewRPC(Eco.Shared.Networking.INetClient,System.Int32,System.String,Eco.Shared.Serialization.BSONObject)">
            <summary>Makes async RPC call on view with <paramref name="id"/>. Ensures that after RPC method execution it will wait for next client update to ensure all changes initiated by RPC synced back to the client before RPC callback invoked.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Client.WaitForClientUpdateAsync(System.Object)">
            <summary>Converts <paramref name="result"/> to async which awaits for next client update. I.e. View RPC with callback may ensure that all view changes synced before the callback invoked.</summary>
        </member>
        <member name="T:Eco.Plugins.Networking.Firewall">
            <summary>Firewall rules manager which helps to check and expose ports for external access.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Firewall.EnsureRule(System.String,System.Net.Sockets.ProtocolType,System.Int32)">
            <summary>Ensures <paramref name="serviceName"/> has firewall port rule which allows internal access with specified protocol.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Firewall.AddRule(WindowsFirewallHelper.IRule)">
            <summary>Adds firewall rule trying different methods.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Firewall.AddRuleAsAdmin(WindowsFirewallHelper.IRule)">
            <summary>Uses elevated privileges with prompt for the rule creation. Only works in Interactive mode.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.Firewall.IsRunAsAdmin">
            <summary>Check if current user has active admin rights.</summary>
        </member>
        <member name="T:Eco.Plugins.Networking.LoginQueue">
            <summary> This class controls the order in which users will be connected to the server if there are no space for everybody.
            It allows to add a client to expiable queue via JoinQueue method. Once added, the user will have to try to reconnect in next 10 seconds in order to keep his place in queue
            Once there are space to join, NetworkServer will connect the first not expired user from queue and advance queue to next one. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.LoginQueue.CleanExpiredClients">
            <summary> Removes all expired consecutive clients in the queue and advances the queue. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.LoginQueue.EnsureClientPositionAndExpirationTime(System.Net.IPEndPoint)">
            <summary> Adds a client to queue or updates his time </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.LoginQueue.AdvanceQueueIfPossible">
            <summary> Removes the first client in queue. Used when client leaves the queue by one of two reasons: expiration or successful login. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.LoginQueue.JoinQueue(System.Net.IPEndPoint)">
            <summary> Adds a client to the queue if necessary.  </summary>
            <returns> Returns 1 if client can join immediately. Otherwise returns the position in the queue. </returns>
        </member>
        <member name="T:Eco.Plugins.Networking.NetworkJoinHandler`1">
            <summary> Handles queue joining logic and priorities relevant. </summary>
            <typeparam name="T">Can be any type for tests.</typeparam>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkJoinHandler`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,System.Boolean},System.Func{`0,System.Int32,System.Boolean},Eco.Plugins.Networking.PriorityLoginQueue)">
            <summary> Initialize the join handler with given delegates so that it be used for skipping protocols. </summary>
            <param name="isAdmin">An admin always skips everything so if a client is an admin even if server connections are complete it should join.</param>
            <param name="isReservedSlot">A reserved slot jumps connection queues but in case the server  connections is complete it can't connect to server. </param>
            <param name="canJoin">This binds with the server configuration to determine if the given client can join the server or not, gives final say on if the client can join.(usually connection counts check)</param>
            <param name="loginQueue">Priority login queue to be used.</param>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkJoinHandler`1.TryOccupySlot(`0)">
            <summary> Check if empty slot exists and occupy it. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkJoinHandler`1.TryBypassQueue(`0)">
            <summary> Returns true if client enters with no queue. It's based on space for connection (any open slots) and users in login queue (even if there are space, new user should wait if there are somebody before him) </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkJoinHandler`1.TryJoinWithQueue(`0,System.Net.IPEndPoint,System.Int32,Eco.Shared.Math.Vector2i@)">
            <summary> Returns true if new client should use queue. It's based on space for connection (any open slots) and users in login queue (even if there are space, new user should wait if there are somebody before him) result is Vector2i(Position, Queuelength) and (-1,-1) if success.</summary>
        </member>
        <member name="P:Eco.Plugins.Networking.NetworkManager.DiscordAddress">
            <summary></summary>
        </member>
        <member name="P:Eco.Plugins.Networking.NetworkManager.DiscordInviteCode">
            <summary>Discord invite code for the configured Discord invite address if present. Otherwise null.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkManager.ConfigurePorts">
            <summary>Reads ports from CLI or ENV and updates server configuration.</summary>
            <returns>Returns a boolean indicating if any ports got changed from CLI / ENV.</returns>
        </member>
        <member name="T:Eco.Plugins.Networking.NetworkMessage">
            <summary> Used to queue network events from NetworkServer.SendEvent/>. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkMessage.Encode(Eco.Shared.Serialization.BSONValue)">
            <summary>Every <see cref="M:Eco.Plugins.Networking.NetworkMessage.Encode(Eco.Shared.Serialization.BSONValue)"/> should be paired by <see cref="M:Eco.Plugins.Networking.NetworkMessage.WaitForEncodedData"/>. These methods may be used in different threads.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkMessage.WaitForEncodedData">
            <summary>Waits until <see cref="M:Eco.Plugins.Networking.NetworkMessage.Encode(Eco.Shared.Serialization.BSONValue)"/> complete (it may be performed in another thread) and returns it's result. Can be only used one time per <see cref="M:Eco.Plugins.Networking.NetworkMessage.Encode(Eco.Shared.Serialization.BSONValue)"/> call.</summary>
        </member>
        <member name="T:Eco.Plugins.Networking.NetworkServer">
            <summary>
            A wrapper around IUdpServer, with threads to handle send/receive and serialization of messages.
            Network events can be send with SendEvent or via interface with INetworkEventHandler.SendEvent"/>.
            They added to <see cref="F:Eco.Plugins.Networking.NetworkServer.messages"/> queue and then processed in background with <see cref="M:Eco.Plugins.Networking.NetworkServer.DeliverMessages"/> method.
            It supports following network events:
            <ul>
            <li><see cref="F:Eco.Shared.Networking.NetworkEvent.ClientLogin"/> - when client connected it welcomed with message containing protocol version and other server related info;</li>
            <li><see cref="F:Eco.Shared.Networking.NetworkEvent.ClientUpdate"/> - server sends this message to the client multiple times per second with network object updates (newly bounded objects, updates for bounded objects and list of unbound (deleted) objects).</li>
            <li><see cref="F:Eco.Shared.Networking.NetworkEvent.RPC"/> and <see cref="F:Eco.Shared.Networking.NetworkEvent.RPCResponse"/> used to perform Remote Procedure Calls (either server-to-client or client-to-server). Most noticeable there is MVC traffic performed with "ViewRPC" calls. </li>
            <li><see cref="F:Eco.Shared.Networking.NetworkEvent.DisconnectReason"/> special event which happens when client or server initiates disconnect and contains disconnection reason.</li>
            <li><see cref="F:Eco.Shared.Networking.NetworkEvent.Views"/> used together with other events (like <see cref="F:Eco.Shared.Networking.NetworkEvent.RPC"/>, <see cref="F:Eco.Shared.Networking.NetworkEvent.RPCResponse"/> and <see cref="F:Eco.Shared.Networking.NetworkEvent.ClientUpdate"/>) and contains MVC views initial data.
            Other messages itself doesn't contains View data, but instead has references to views sent in this event. It prevents from issues when same view sent in different messages from multiple threads or referenced in temporary objects for later delivery.
            It also allows to apply optimizations when same network data sent to multiple objects, because different clients may have different set of already bounded views and using references instead of full view data allows us to use exactly same data for all of them.</li>
            </ul>
            See Networking.md for additional details.
            </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.SendBinaryArrays(Eco.Core.Controller.IMvcNetClient,Eco.Shared.Networking.NetworkEvent,Eco.Shared.Pools.Collections.PoolableListWrapper{System.Byte[]})">
            <summary> Sends <see cref="P:Eco.Core.Controller.IMvcNetClient.Views"/> and <see cref="P:Eco.Core.Controller.IMvcNetClient.Blobs"/> to the client. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.FillClientsOfMessage(Eco.Plugins.Networking.NetworkMessage)">
            <summary> Determines all clients who will get the message based on Target/Tagrets/Object properties </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.DeliverMessages">
            <summary> Delivers <see cref="F:Eco.Plugins.Networking.NetworkServer.messages"/> in the queue. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.DeliverMessage(Eco.Plugins.Networking.NetworkMessage)">
            <summary>
            Delivers <paramref name="message"/> to target clients.
            If <code>message.Target</code> provided or <code>message.NetObject</code> is <see cref="T:Eco.Shared.Networking.INetClient"/> then message delivered to specified <see cref="T:Eco.Shared.Networking.INetClient"/>.
            Otherwise it will broadcast <paramref name="message"/> to all connected clients with bounded <code>message.NetObject</code>.
            </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.TryBypassQueue(Eco.Plugins.Networking.Client)">
            <summary>Check if the given client can bypass queues.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.TryJoinWithQueue(Eco.Plugins.Networking.Client,Eco.Shared.Math.Vector2i@)">
            <summary>Check if the client is first in queue or not.</summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.NeedLoginQueue(Eco.Plugins.Networking.Client)">
            <summary> Returns true if new client should use queue. It's based on space for connection (any open slots) and users in login queue (even if there are space, new user should wait if there are somebody before him) </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.NetworkServer.GetStatus(System.Collections.Generic.Dictionary{Eco.Shared.Networking.INetObjectViewer,System.String})">
            <summary> Get Status report from <see cref="T:Eco.Shared.Networking.Monitoring.NetTrafficTracker"/>. Optionally pass data to use instead of <see cref="T:Eco.Shared.Networking.Monitoring.NetTrafficTracker"/> (used to dump existing status data to file)</summary>
        </member>
        <member name="T:Eco.Plugins.Networking.PriorityLoginQueue">
            <summary>
            It's similar to Login Queue which allows to have expiable connections, but it also allows to prioritize them.
            For each priority of client it will create it's own login queue and it won't let you join until all queues with higher priority are empty
            </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.PriorityLoginQueue.AdvanceQueueIfPossible">
            <summary> Removes the first client in queue. Used when client leaves the queue by one of two reasons: expiration or successful login. </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.PriorityLoginQueue.JoinQueue(System.Net.IPEndPoint,System.Int32)">
            <summary> Adds a client to the queue  </summary>
            <returns> Returns 1 if client can join immediately. Otherwise returns the position in the queue. </returns>
        </member>
        <member name="M:Eco.Plugins.Networking.QuadTreePerType.#ctor(System.Type[])">
            <summary> Each type will generate its own tree. It will allow to make faster search by type, such as IPrey.  </summary>
        </member>
        <member name="M:Eco.Plugins.Networking.QuadTreeNetObjectCollection.GetNewRelevantObjects(Eco.Shared.Networking.INetObjectViewer,Eco.Shared.Networking.INetObjectContainer,System.Boolean)">
            <summary> Get the objects that are relevant to us.  Objects newly added to the world are found by looking at time stamp of recently added ones.  Objects that are
            not new but have become relevant because of distance are returned via quadtree query, and only sought if 'full search' is checked, because its a little slower.</summary>
        </member>
        <member name="T:Eco.Plugins.Profiling.ProfilingPlugin">
            <summary>Allows admins to run profiling tasks on the server to get diagnostic data.</summary>
            <remarks>Can be run from server UI and called from in-game via commands (/profiler). Depends on `dotnet-dump` and `dotnet-trace` tools and requires them to be installed and available on system's PATH.</remarks>
        </member>
        <member name="P:Eco.Plugins.Profiling.ProfilingPlugin.ExecutableDirectory">
            <summary>
            Retrieves the servers current install directory. Due to either a bug or core change in .NET 6 a unique lookup
            method is required on MacOS Catalina or newer otherwise the server will crash on startup trying to write to the install
            folder of .NET which is now read only
            </summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.RunProfilers(Eco.Gameplay.Systems.Chat.IChatClient,Eco.Plugins.Profiling.ProfilingScenario,System.Int32)">
            <summary>
            Convert flags to a list of IProfilingScenario
            </summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.GetResultFilename(System.DateTime,System.String,System.String)">
            <summary>Generates a simplified result filename combining: simplified, sortable date; application name; result type name and extension.</summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.RunDotnetTool(System.String,System.String)">
            <summary>This utility applies sane defaults for use with dotnet diagnostics tools and changes working directory to <see cref="P:Eco.Plugins.Profiling.ProfilingPlugin.ResultsDirectory"/> for simpler file saves.</summary>
            <exception cref="T:System.ApplicationException">Thrown when the invoked dotnet tool finishes with an erroneous exit code.</exception>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.SetupResultsDirectory">
            <summary>Call this to ensure that the results directory exists.</summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.OpenResultsDirectory">
            <summary>Opens result directory by calling it as a shell command so that it's cross-platform compatible.</summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.DisplayResultsPopup(Eco.Shared.Localization.LocString)">
            <summary>If running with Server UI, opens a popup that allows to quickly open results directory.</summary>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.DisplayToolInstallationInstructions(Eco.Gameplay.Systems.Chat.IChatClient)">
            <summary>Used to display tool installation instructions in case of a tool presence error.</summary>
            <remarks>If the profiling session was started from server UI, will display popup window; otherwise a simplistic
            message requesting logs to be checked will be sent to the calling user as a notification.</remarks>
        </member>
        <member name="M:Eco.Plugins.Profiling.ProfilingPlugin.DisplayNotification(Eco.Gameplay.Systems.Chat.IChatClient,Eco.Shared.Localization.LocString,Eco.Shared.Localization.LocString,Eco.Shared.Services.NotificationStyle)">
            <summary>Send a status notification for the given user. If no user given, assumes call from Server UI and will display popup window instead.</summary>
            <param name="client">The client to be notified. null means Server UI.</param>
            <param name="message">The main notification message.</param>
            <param name="caption">If needed, a caption can be provided. Server UI will use it as actual popup window caption, in-game notification will use this as a prefix for the notification.</param>
            <param name="style">The category to be used for notification. Will be translated to MessageBoxIcon for use in popup window when called from Server UI.</param>
        </member>
        <member name="T:Eco.Plugins.Rcon.RconClient">
            <summary>
            Represents an active RCON server connection. RconClient implements the INetClient interface for assocating
            our active connection with the internal RCON user used by the RconPlugin object.
            </summary>
        </member>
        <member name="F:Eco.Plugins.Rcon.RconClient.Authenticated">
            <summary>Represents the RCON client's current authenticated state.</summary>
        </member>
        <member name="P:Eco.Plugins.Rcon.RconClient.LastRead">
            <summary>Timestamp of when the last RCON packet was read from the network</summary>
        </member>
        <member name="P:Eco.Plugins.Rcon.RconClient.LastWrite">
            <summary>Timestamp of when the last RCON packet was written to the network</summary>
        </member>
        <member name="P:Eco.Plugins.Rcon.RconClient.Connected">
            <summary>Represents the RCON client's current connected state</summary>
        </member>
        <member name="P:Eco.Plugins.Rcon.RconClient.Available">
            <summary>Represents the RCON client's current availability state</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.Dispose">
            <summary>Disposes of the RCON client and network connection</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.ReadPacketAsync(System.Threading.CancellationToken)">
            <summary>Reads an incoming <seealso cref="T:Eco.Plugins.Rcon.RconPacket"/> from the network stream</summary>
            <returns>Read <seealso cref="T:Eco.Plugins.Rcon.RconPacket"/></returns>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.WritePacketAsync(Eco.Plugins.Rcon.RconPacket,System.Threading.CancellationToken)">
            <summary>Writes an <seealso cref="T:Eco.Plugins.Rcon.RconPacket"/> to the network stream</summary>
            <param name="packet"><seealso cref="T:Eco.Plugins.Rcon.RconPacket"/> to write to the network Stream</param>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.Disconnect">
            <summary>Disconnects the RCON client. Force closing the connection</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.PollConnection(System.Threading.CancellationToken)">
            <summary>Handles the network traffic of the active RCON connection</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.OkBoxLoc(System.FormattableString)">
            <summary>Displays string to the client</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconClient.GetAndClearResponseString">
            <summary>Retrieves and clears the current pending response string if present. Otherwise returns an empty string</summary>
            <returns><seealso cref="T:Eco.Shared.Localization.LocString"/> containing the exec request response</returns>
        </member>
        <member name="T:Eco.Plugins.Rcon.RconPacketType">
            <summary> 
            <para>Represents all possible transaction types within the RCON protocol. </para>
            <para>For a more complete breakdown of the individual packet types refer to the documentation found on the Wiki https://wiki.play.eco/en/RCON#Packet_Types </para>
            </summary>
        </member>
        <member name="F:Eco.Plugins.Rcon.RconPacketType.ResponseValue">
            <summary>SERVERDATA_RESPONSE_VALUE: This packet type is sent by the server after completing a command execution.</summary>
        </member>
        <member name="F:Eco.Plugins.Rcon.RconPacketType.ExecCommand">
            <summary>
            SERVERDATA_EXECCOMMAND: This packet type is sent by the client to request a command be run. This packet should
            be followed up by a ResponseValue packet containing the results of the execution.
            </summary>
        </member>
        <member name="F:Eco.Plugins.Rcon.RconPacketType.AuthResponse">
            <summary>
            SERVERDATA_AUTH_RESPONSE: This packet type is sent by the server after receiving a Auth request packet. The contents
            of this packet vary based on the results of the authentication request. An invalid authentication request will contain
            a packet id of -1.
            </summary>
        </member>
        <member name="F:Eco.Plugins.Rcon.RconPacketType.Auth">
            <summary>
            SERVERDATA_AUTH: This packet type is sent by the client to request authorization to use the RCON server and 
            execute commands. It is followed up by a AuthResponse packet containing the results of authentication.
            </summary>
        </member>
        <member name="T:Eco.Plugins.Rcon.RconPacket">
            <summary>Represents an RCON packet used by the RCON server inside RconPlugin. Handles the encode/decode of outbound and inbound packets.</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconPacket.WriteToAsync(System.Net.Sockets.NetworkStream,System.Threading.CancellationToken)">
            <summary>Writes the RCON packet instance to a NetworkStream for sending over the network</summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconPacket.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eco.Plugins.Rcon.RconPacket.FromStream(System.IO.Stream)"/>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconPacket.FromStream(System.IO.Stream)">
            <summary>Reads the RCON packet from a NetworkStream instance and returns the <seealso cref="T:Eco.Plugins.Rcon.RconPacket"/> instance.</summary>
        </member>
        <member name="T:Eco.Plugins.Rcon.RconPlugin">
            <summary>
            <para>
            This plugin adds Remote Console (RCON) support to the Eco Server. It follows the Source RCON standard used by majority of the industry. The plugin exposes
            a TCP socket (Default on port 3002) for allowing remote administrative command execution and automated command handling for tasks, tools, and shutdown procedures.
            </para>
            
            <para>A complete how-to for RCON and a complete protocol breakdown can be found on the Wiki here: https://wiki.play.eco/en/RCON </para>
            </summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconPlugin.AcceptClientConnection(System.Net.Sockets.TcpClient,System.Threading.CancellationToken)">
            <summary> Accepts a new incoming <seealso cref="T:System.Net.Sockets.TcpClient"/>. Creating a new <seealso cref="T:Eco.Plugins.Rcon.RconClient"/> in response and incrementing our countdown event. </summary>
        </member>
        <member name="M:Eco.Plugins.Rcon.RconPlugin.ServeClient(Eco.Plugins.Rcon.RconClient,System.Threading.CancellationToken)">
            <summary>Runs the client connection while its active in an asynchronous task.</summary>
        </member>
        <member name="T:Eco.Plugins.Rcon.RconProtocolError">
            <summary>
            Exception used to represent errors with the RCON protocol
            </summary>
        </member>
        <member name="T:Eco.Core.Controller.Internal.ClientUpdater">
            <summary>Helper class for background processing of changed properties and notifying bounded clients.</summary>
        </member>
        <member name="M:Eco.Core.Controller.Internal.ClientUpdater.UpdateTask">
            <summary>Background task to process client updates. Flushes data from subsystems (currently only view system, to be expanded to chunks, physics etc).</summary>
        </member>
        <member name="T:Eco.Core.Controller.Internal.ControllerUpdater">
            <summary>Helper class for background processing of changed properties and notifying bounded clients.</summary>
        </member>
        <member name="M:Eco.Core.Controller.Internal.ControllerUpdater.NotifyClientsInBackground(Eco.Core.Controller.IController,System.String,Eco.Core.Controller.IMvcNetClient)">
            <summary>Notifies clients bounded for <paramref name="propertyName"/> in background. Not guaranteed when it will be notified. Used to avoid slowdown threads by viewNotifications from callback. </summary>
        </member>
    </members>
</doc>
